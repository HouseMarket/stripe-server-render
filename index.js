import express from "express";
import Stripe from "stripe";
import cors from "cors";
import dotenv from "dotenv";
import crypto from "crypto";

dotenv.config();

const app = express();
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);

// ‚úÖ –í–µ–±—Ö—É–∫ –¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –î–û express.json() –∏ express.urlencoded()!
// ‚úÖ –í–µ–±—Ö—É–∫ –æ—Ç Stripe
app.post("/webhook", express.raw({ type: "application/json" }), async (req, res) => {
    console.log("üîπ –í–µ–±—Ö—É–∫ –ø–æ–ª—É—á–µ–Ω –æ—Ç Stripe");

    let rawBodyBuffer = req.rawBody;
    if (!rawBodyBuffer || !Buffer.isBuffer(rawBodyBuffer)) {
        console.warn("‚ö†Ô∏è req.rawBody –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—ë–º Buffer –≤—Ä—É—á–Ω—É—é!");
        rawBodyBuffer = Buffer.from(req.body || "", "utf-8");
    }

    console.log("‚úÖ req.rawBody —Å–æ–∑–¥–∞–Ω, –¥–ª–∏–Ω–∞:", rawBodyBuffer.length, "–±–∞–π—Ç");

    try {
        const sig = req.headers["stripe-signature"];
        const event = stripe.webhooks.constructEvent(rawBodyBuffer, sig.trim(), process.env.STRIPE_WEBHOOK_SECRET.trim());

        console.log("‚úÖ Webhook received:", event.type);

        if (event.type === "checkout.session.completed") {
            const session = event.data.object;
            const payment_key = session.metadata?.payment_key || "undefined";

            console.log("‚úÖ Payment completed for:", payment_key);

            // üîç –õ–û–ì–ò–†–£–ï–ú –û–¢–ü–†–ê–í–ö–£ –í CREATIUM
            console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Creatium:", {
                payment_key: payment_key,
                status: "succeeded"
            });

            try {
                const creatiumResponse = await fetch("https://api.creatium.io/integration-payment/third-party-payment", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ payment_key, status: "succeeded" })
                });

                const responseText = await creatiumResponse.text(); // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
                console.log("üì• –û—Ç–≤–µ—Ç –æ—Ç Creatium:", responseText);

            } catch (fetchError) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Creatium:", fetchError.message);
            }
        }

        res.json({ received: true });
    } catch (error) {
        console.error("‚ùå Webhook Signature Error:", error.message);
        res.status(400).json({ error: "Webhook signature verification failed", details: error.message });
    }
});

// ‚úÖ –ü–æ–¥–∫–ª—é—á–∞–µ–º JSON-–ø–∞—Ä—Å–µ—Ä –ø–æ—Å–ª–µ –≤–µ–±—Ö—É–∫–æ–≤
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// ‚úÖ –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –æ–ø–ª–∞—Ç—ã (Creatium)
// ‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Creatium
app.post("/creatium-payment", async (req, res) => {
    try {
        console.log("üîπ –ó–∞–ø—Ä–æ—Å –æ—Ç Creatium:", JSON.stringify(req.body, null, 2));

        const payment_key = req.body.payment?.key || req.body.payment?.external_id || null;
        const product = req.body.order?.fields_by_name?.["–ù–∞–∑–≤–∞–Ω–∏–µ"] || req.body.cart?.items?.[0]?.title || "Unknown Product";
        const price = Math.round(parseFloat(req.body.payment?.amount) * 100) || null;
        const currency = req.body.payment?.currency || "nzd"; // –ï—Å–ª–∏ –ø—É—Å—Ç–æ, —Å—Ç–∞–≤–∏–º NZD

        if (!payment_key || !product || isNaN(price) || !currency) {
            console.log("‚ùå Missing required fields:", { payment_key, product, price, currency });
            return res.status(400).json({ error: "Missing required fields", received: { payment_key, product, price, currency } });
        }

        // ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º `payment_key` –≤ metadata
        const session = await stripe.checkout.sessions.create({
            payment_method_types: ["card"],
            locale: "en",
            allow_promotion_codes: false,
            line_items: [
                {
                    price_data: {
                        currency,
                        product_data: {
                            name: product,
                        },
                        unit_amount: price,
                    },
                    quantity: 1,
                },
            ],
            metadata: {
                payment_key: payment_key, // <-- üéØ –ü–µ—Ä–µ–¥–∞—ë–º `payment_key` –≤ Stripe!
            },
            mode: "payment",
            success_url: `${process.env.CLIENT_URL}/payment-success?payment_key=${payment_key}`,
            cancel_url: `${process.env.CLIENT_URL}/cancel?payment_key=${payment_key}`,
        });

        console.log("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–ª–∞—Ç—ë–∂–Ω–∞—è —Å–µ—Å—Å–∏—è:", session.url);
        console.log("üîπ Metadata –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ Stripe:", session.metadata);

        res.json({ url: session.url });
    } catch (error) {
        console.log("‚ùå Error creating payment session:", error.message);
        res.status(500).json({ error: error.message });
    }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`‚úÖ Server running on port ${PORT}`));
